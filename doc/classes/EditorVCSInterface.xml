<?xml version="1.0" encoding="UTF-8" ?>
<class name="EditorVCSInterface" inherits="Object" version="3.4">
	<brief_description>
		Version Control System (VCS) interface which reads and writes to the local VCS in use.
	</brief_description>
	<description>
		Used by the editor to display VCS extracted information in the editor. The implementation of this API is included in VCS addons, which are essentially GDNative plugins that need to be put into the project folder. These VCS addons are scripts which are attached (on demand) to the object instance of [code]EditorVCSInterface[/code]. All the functions listed below, instead of performing the task themselves, they call the internally defined functions in the VCS addons to provide a plug-n-play experience.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="checkout_branch">
			<return type="bool">
			</return>
			<argument index="0" name="branch" type="String">
			</argument>
			<description>
				Checks out to the `branch` and returns false if there is any error while performing checkout operation.
			</description>
		</method>
		<method name="commit">
			<return type="void">
			</return>
			<argument index="0" name="msg" type="String">
			</argument>
			<description>
				Creates a version commit if the addon is initialized, else returns without doing anything. Uses the files which have been staged previously, with the commit message set to a value as provided as in the argument.
			</description>
		</method>
		<method name="discard_file">
			<return type="void">
			</return>
			<argument index="0" name="file_path" type="String">
			</argument>
			<description>
				Discards changes made in 'file_path'.
			</description>
		</method>
		<method name="fetch">
			<return type="void">
			</return>
			<description>
				fetchs changes from remote. For now 'origin' is hardcoded for remote name.
			</description>
		</method>
		<method name="get_project_name">
			<return type="String">
			</return>
			<description>
				Returns the project name of the VCS working directory.
			</description>
		</method>
		<method name="get_vcs_name">
			<return type="String">
			</return>
			<description>
				Returns the name of the VCS if the VCS has been initialized, else return an empty string.
			</description>
		</method>
		<method name="initialize">
			<return type="bool">
			</return>
			<argument index="0" name="project_root_path" type="String">
			</argument>
			<description>
				Initializes the VCS addon if not already. Uses the argument value as the path to the working directory of the project. Creates the initial commit if required. Returns [code]true[/code] if no failure occurs, else returns [code]false[/code].
			</description>
		</method>
		<method name="is_addon_ready">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if the addon is ready to respond to function calls, else returns [code]false[/code].
			</description>
		</method>
		<method name="is_vcs_initialized">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if the VCS addon has been initialized, else returns [code]false[/code].
			</description>
		</method>
		<method name="pull">
			<return type="void">
			</return>
			<description>
				Pulls changes of corrent branch from remote.
			</description>
		</method>
		<method name="push">
			<return type="void">
			</return>
			<description>
				Pushes changes of corrent branch to remote.
			</description>
		</method>
		<method name="set_up_credentials">
			<return type="void">
			</return>
			<argument index="0" name="arg0" type="String">
			</argument>
			<argument index="1" name="arg1" type="String">
			</argument>
			<description>
				Sets up username and password for remote.
			</description>
		</method>
		<method name="shut_down">
			<return type="bool">
			</return>
			<description>
				Shuts down the VCS addon to allow cleanup code to run on call. Returns [code]true[/code] is no failure occurs, else returns [code]false[/code].
			</description>
		</method>
		<method name="stage_file">
			<return type="void">
			</return>
			<argument index="0" name="file_path" type="String">
			</argument>
			<description>
				Stages the file which should be committed when [method EditorVCSInterface.commit] is called. Argument should contain the absolute path.
			</description>
		</method>
		<method name="unstage_file">
			<return type="void">
			</return>
			<argument index="0" name="file_path" type="String">
			</argument>
			<description>
				Unstages the file which was staged previously to be committed, so that it is no longer committed when [method EditorVCSInterface.commit] is called. Argument should contain the absolute path.
			</description>
		</method>
	</methods>
	<signals>
		<signal name="stage_area_refreshed">
			<description>
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="CHANGE_TYPE_NEW" value="0" enum="ChangeType">
		</constant>
		<constant name="CHANGE_TYPE_MODIFIED" value="1" enum="ChangeType">
		</constant>
		<constant name="CHANGE_TYPE_RENAMED" value="2" enum="ChangeType">
		</constant>
		<constant name="CHANGE_TYPE_DELETED" value="3" enum="ChangeType">
		</constant>
		<constant name="CHANGE_TYPE_TYPECHANGE" value="4" enum="ChangeType">
		</constant>
		<constant name="CHANGE_TYPE_UNMERGED" value="5" enum="ChangeType">
		</constant>
		<constant name="TREE_AREA_COMMIT" value="0" enum="TreeArea">
		</constant>
		<constant name="TREE_AREA_STAGED" value="1" enum="TreeArea">
		</constant>
		<constant name="TREE_AREA_UNSTAGED" value="2" enum="TreeArea">
		</constant>
	</constants>
</class>
